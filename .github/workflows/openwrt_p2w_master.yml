#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

#==========================
# Â∑•‰ΩúÊµÅÁöÑÂêçÂ≠óÔºàÈöè‰æøÂÜôÔºâ
name: openwrt_p2w_master
#==========================

on:
  push:
    paths:
      #==========================
      - "p2w_master.config"
      # ÊîπÊàêÂíå‰∏ãÊñπCONFIG_FILE ‰∏ÄÊ†∑
      #==========================
    branches:
      - master
  repository_dispatch:
  #==========================
  #ÂèñÊ∂à‰∏ãÊñπÊ≥®Èáä = ÊØèÂ§©ÂáåÊô®4ÁÇπÁºñËØë
  # schedule:
  #  - cron: 0 20 * * *
  #==========================
  #ÂèñÊ∂à‰∏ãÊñπÊ≥®Èáä = ÁÇπ[‚òÖstar]‰∏ÄÈîÆÁºñËØë
  #watch:
  # types: [started]
  #==========================

env:
  #==========================
  # Specify here the OpenWrt Repo URL and Branch
  # Âú®ËøôÈáåÊåáÂÆö‰Ω†ÁöÑOpenWrtÁöÑ‰ªìÂ∫ìÂú∞ÂùÄURLÂíåÂàÜÊîØ
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  #==========================
  # Specify here your config file
  # Âú®ËøôÈáåÊåáÂÆö‰Ω†ÁöÑÈÖçÁΩÆÊñá‰ª∂Âêç
  CONFIG_FILE: p2w_master.config
  #==========================
  # ÁºñËØëÂâçËøêË°åÁöÑËÑöÊú¨
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  #==========================
  # ÊòØÂê¶‰∏ä‰º†BINÊñá‰ª∂Â§π
  UPLOAD_BIN_DIR: false
  #==========================
  # ÊòØÂê¶‰∏ä‰º†Âõ∫‰ª∂
  UPLOAD_FIRMWARE: true
  #==========================
  # ÊòØÂê¶‰∏ä‰º†Âõ∫‰ª∂Âà∞WETRANSFER
  UPLOAD_WETRANSFER: true
  #==========================
  # ÊòØÂê¶‰∏ä‰º†Âõ∫‰ª∂Âà∞github release
  UPLOAD_RELEASE: true
  #==========================
  # time zone Êó∂Âå∫
  TZ: Asia/Shanghai
  #==========================

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout ÊäìÂèñÂΩìÂâç‰ªìÂ∫ì
        uses: actions/checkout@main

      - name: Initialization environment ÂàùÂßãÂåñ
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir

      - name: Clone source code ÊäìÂèñÊ∫êÁ†Å
        working-directory: /workdir
        run: |
          df -hT $PWD
          git clone $REPO_URL -b $REPO_BRANCH openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

      - name: Load custom feeds Âä†ËΩΩËá™ÂÆö‰πâfeeds
        run: |
          chmod +x $DIY_P1_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P1_SH

      - name: Update feeds Êõ¥Êñ∞feeds
        run: cd openwrt && ./scripts/feeds update -a

      - name: Install feeds ÂÆâË£Öfeeds
        run: cd openwrt && ./scripts/feeds install -a

      - name: Load custom configuration ËØªÂèñËá™ÂÆö‰πâÈÖçÁΩÆ
        run: |
          [ -e files ] && mv files openwrt/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          chmod +x $DIY_P2_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P2_SH

      - name: Download package ‰∏ãËΩΩÊèí‰ª∂ËµÑÊ∫ê
        id: package
        run: |
          cd openwrt
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile the firmware ÁºñËØëÂõ∫‰ª∂
        id: compile
        run: |
          cd openwrt
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: Check space usage Ê£ÄÊü•Á©∫Èó¥Áî®Èáè
        if: (!cancelled())
        run: df -hT

      - name: Upload bin directory ‰∏ä‰º†binÊñá‰ª∂Â§π
        uses: actions/upload-artifact@main
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        with:
          name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/bin

      - name: Organize files ÂÆâÊéíÊñá‰ª∂
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload firmware directory ‰∏ä‰º†Âõ∫‰ª∂
        uses: actions/upload-artifact@main
        if: steps.organize.outputs.status == 'success' && !cancelled()
        with:
          name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: Upload firmware to WeTransfer ‰∏ä‰º†Âõ∫‰ª∂Âà∞WeTransfer
        id: wetransfer
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
          echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
          echo "url=$(cat wetransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

      - name: Generate release tag ÂàõÂª∫GitHub releaseÊ†áÁ≠æ
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
          touch release.txt
          [ $UPLOAD_WETRANSFER = true ] && echo "üîó [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload firmware to release ‰∏ä‰º†Âõ∫‰ª∂Âà∞github release
        uses: softprops/action-gh-release@v1
        if: steps.tag.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/*

      - name: Delete workflow runs Âà†Èô§Â∑•‰ΩúÊµÅËøêË°å
        uses: GitRML/delete-workflow-runs@main
        with:
          retain_days: 1
          keep_minimum_runs: 3
