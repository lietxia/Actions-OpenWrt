#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

#==========================
# 工作流的名字（随便写）
name: op_mac_acrh17
#==========================

on:
  push:
    paths:
      #==========================
      - "acrh17.config"
      # 改成和下方CONFIG_FILE 一样
      #==========================
    branches:
      - master
  repository_dispatch:
  workflow_dispatch:
  #==========================
  #取消下方注释 = 每天凌晨4点编译
  # schedule:
  #   - cron: 0 20 * * *
  #==========================
  #取消下方注释 = 点[★star]一键编译
  #watch:
  #  types: [started]
  #==========================

env:
  #==========================
  # Specify here the OpenWrt Repo URL and Branch
  # 在这里指定你的OpenWrt的仓库地址URL和分支
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  #==========================
  # feeds config file
  FEEDS_CONF: feeds.conf.default
  #==========================
  # Specify here your config file
  # 在这里指定你的配置文件名
  CONFIG_FILE: acrh17.config
  #==========================
  # 编译前运行的脚本
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  #==========================
  # 是否上传BIN文件夹
  UPLOAD_BIN_DIR: false
  #==========================
  # 是否上传固件
  UPLOAD_FIRMWARE: true
  #==========================
  # 是否上传固件到WETRANSFER
  UPLOAD_WETRANSFER: true
  #==========================
  # 是否上传固件到github release
  UPLOAD_RELEASE: true
  #==========================

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Checkout 抓取当前仓库
        uses: actions/checkout@main

      - name: Initialization environment 初始化
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo hdiutil create -size 40g -type SPARSE -fs "Case-sensitive HFS+" -volname OpenWrt OpenWrt.sparseimage
          hdiutil attach OpenWrt.sparseimage -autoopenrw
          brew install coreutils diffutils findutils gawk gnu-getopt gnu-tar grep wget quilt xz
          brew install gcc@11
          sudo mkdir -p /Volumes/OpenWrt/workdir
          sudo chown $USER:$GROUPS /Volumes/OpenWrt/workdir

      - name: Clone source code 抓取源码
        working-directory: /Volumes/OpenWrt/workdir
        run: |
          df -hT $PWD
          git clone $REPO_URL -b $REPO_BRANCH openwrt
          ln -sf /Volumes/OpenWrt/workdir/openwrt $GITHUB_WORKSPACE/openwrt

      - name: Load custom feeds 加载自定义feeds
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          chmod +x $DIY_P1_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P1_SH

      - name: Update feeds 更新feeds
        run: cd openwrt && ./scripts/feeds update -a

      - name: Install feeds 安装feeds
        run: cd openwrt && ./scripts/feeds install -a

      - name: Load custom configuration 读取自定义配置
        run: |
          [ -e files ] && mv files openwrt/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          chmod +x $DIY_P2_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P2_SH

      - name: Download package 下载插件资源
        id: package
        run: |
          cd openwrt
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile the firmware 编译固件
        id: compile
        run: |
          cd openwrt
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "::set-output name=status::success"
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: Check space usage 检查空间用量
        if: (!cancelled())
        run: df -hT

      - name: Upload bin directory 上传bin文件夹
        uses: actions/upload-artifact@main
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        with:
          name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/bin

      - name: Organize files 安排文件
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "::set-output name=status::success"

      - name: Upload firmware directory 上传固件
        uses: actions/upload-artifact@main
        if: steps.organize.outputs.status == 'success' && !cancelled()
        with:
          name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: Upload firmware to WeTransfer 上传固件到WeTransfer
        id: wetransfer
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
          echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
          echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"

      - name: Generate release tag 创建GitHub release标签
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
          touch release.txt
          [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
          echo "::set-output name=status::success"

      - name: Upload firmware to release 上传固件到github release
        uses: softprops/action-gh-release@v1
        if: steps.tag.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/*

      - name: Delete workflow runs 删除工作流运行
        uses: GitRML/delete-workflow-runs@main
        with:
          retain_days: 1
          keep_minimum_runs: 3

      - name: Remove old Releases 删除旧的release
        uses: dev-drprasad/delete-older-releases@v0.1.0
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
